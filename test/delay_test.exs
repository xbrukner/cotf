defmodule DelayTest do
  use ExUnit.Case

  test "Junction delay" do
    {m, _sev} = RoadMap.new("sample_map.txt")
    g = %Global{map: m, tf_duration: 60}
    cars = %{0 => 30, 1 => 4, 3 => 20}

#Check if needed
    assert Delay.junction(g, "A", "B", cars) == %{0 => 41.83281572999747, 1 => 8.035714285714285,
             3 => 11.249999999999998}
  end

  test "Segment delay" do
    {m, _sev} = RoadMap.new("sample_map.txt")
    g = %Global{map: m, tf_duration: 60}
    cars = %{0 => 10, 1 => 20, 2 => 30, 3 => 10, 4 => 10, 5 => 10}

#Modified to reflect float arithmetics of elixir
    assert Delay.segment(g, "A", "B", cars) ==
      %{0 => 268.94652696797493, 1 => 293.38625573372667,
             2 => 442.4077732530721, 3 => 411.78400320845816,
             4 => 371.0267722433895, 5 => 330.2695412783207}
  end

  test "Bad meeting place for segment" do
    {m, _sev} = RoadMap.new("sample_map.txt")
    g = %Global{map: m, tf_duration: 60}

    cars = %{0=>14,1=>13,2=>19,3=>28,4=>26,5=>22,6=>16,7=>19,8=>22,9=>11,10=>21,11=>23,12=>25,13=>29,14=>29,15=>20,16=>26,17=>24,18=>22,19=>16,20=>23,21=>21,22=>36,23=>26,24=>24,25=>25,26=>15,27=>21,28=>21,29=>23,30=>26,31=>23,32=>25,33=>39,34=>28,35=>21,36=>25,37=>25,38=>25,39=>24,40=>29,41=>26,42=>18,43=>20,44=>21,45=>23,46=>25,47=>17,48=>18,49=>23,50=>17,51=>20,52=>24,53=>20,54=>24,55=>26,56=>22,57=>29,58=>23,59=>22,60=>16,61=>6,62=>4,63=>1}
    assert Delay.segment(g, "F", "C", cars) == %{0=>97.64778946858077,1=>96.57721786491311,2=>104.18276999702316,3=>137.2068827289744,4=>123.65662393582312,5=>109.9239132115754,6=>99.97962044007572,7=>104.18276999702316,8=>109.9239132115754,9=>94.57988176268967,10=>107.7617290385582,11=>112.44108365795705,12=>119.08770816504978,13=>147.36615578707378,14=>147.36615578707378,15=>122.68232086133746,16=>123.65662393582312,17=>115.43620118912226,18=>109.9239132115754,19=>99.97962044007572,20=>112.44108365795705,21=>107.7617290385582,22=>299.6656973171226,23=>309.2796427736869,24=>309.2391077749112,25=>308.80085817074644,26=>301.1217482250769,27=>289.49957415545083,28=>302.119024877849,29=>296.93317111178277,30=>296.08809607506214,31=>295.24302103834145,32=>294.0002313962318,33=>386.9434254906887,34=>386.97538400714006,35=>370.8793536684253,36=>382.03683185680006,37=>396.7783075685451,38=>381.5782766106729,39=>395.42153993767346,40=>412.84880078804434,41=>402.12876673438495,42=>381.55273949145754,43=>383.14376242406263,44=>387.4227834991956,45=>396.4869477083393,46=>409.1351094408533,47=>386.7670834362407,48=>383.6364094624927,49=>385.8817317738001,50=>386.0912415013525,51=>383.61275308637715,52=>392.976019509165,53=>402.33928593195276,54=>381.76325868902535,55=>396.1258911171977,56=>408.69652478368505,57=>394.3924932066555,58=>380.9844610104685,59=>390.4143081762118,60=>393.57215967605725,61=>362.48167849250603,62=>326.81040844329567,63=>279.0168727517985}

  end

  test "Long queue + short queue" do
    {m, _sev} = RoadMap.new("sample_map.txt")
    g = %Global{map: m, tf_duration: 60}

    cars = %{0 => 1000, 1 => 10, 2 => 10}
    assert Delay.segment(g, "F", "C", cars) == %{0=>60825.178984470476,1=>93526.40704146084,2=>94115.14423070817}
  end
end
